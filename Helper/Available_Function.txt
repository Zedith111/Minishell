Basic Function
		- printf
		- malloc
		- free
		- write
		- close
		- exit
		- strerror
		- perror

Readline Function
	- Need install from Brew
	- Use to get input from stdin
	- Resources
		- https://web.mit.edu/gnu/doc/html/rlman_2.html
		- https://eli.thegreenplace.net/2016/basics-of-using-the-readline-library/
	- Function available :
		readline
			- Function Prototype
				char	*readline(const char *prompt)
			- Description
				- Read a line from terminal and return it. Prompt will be displayed at beginning
				- The return value is automatically allocate with malloc
		
		rl_clear_history
			- Function Prototype
				void	rl_clear_history (void)
			- Description
				- Clear the history list by deleting all entries
		
		rl_on_new_line
			- Function Prototype
				int		rl_on_new_line (void)
			- Description
				- Tell the update function we have move onto a new line
		
		rl_replace_line
			- Function Prototype
				void	rl_replace_line (const char *text, int clear_undo)
			- Description
				- Replace the content of rl_line_buffer with text
				- If clear_undo is non-zero, the undo list associated with the current line is cleared
		
		rl_redisplay
			- Function Prototype
				void	rl_redisplay (void)
			- Description
				- Change whatâ€™s displayed on the screen to reflect the current contents of rl_line_buffer
		
		add_history
			- Function Prototype
				void	add_history (const char *string)
			- Description
				- Add the string to history list

IO Function
		access
			- Function Prototype
				int		access (const char *path, int amode)
			- Description
				- Check the file pointed by path argument for accessibility according to amode
				- amode : R_OK, W_OK, X_OK, F_OK (existence test)
				- Return 0 when success, -1 when fail

		open
			- Function Prototype
				int		open (const char *path, int oflag, ...)
			- Description
				- establish connection between file and file descriptor
				- for oflag, refer to
					https://linux.die.net/man/3/open
				- If success,Return a positive integer representing the file descriptor. Otherwise, return -1

		read
			- Function Prototype
				size_t	read (int fildes, void *buf, size_t nbyte)
			- Description
				- Attempt to read nbyte from fildes, into buf
				- return number of byte read if success, -1 if fail
		
		fork
			- Function Prototype
				pid_t	fork (void)
			- Description
				- Create a new process by duplicating calling process
				- On success, return pid of child in parent, return 0 in child. Return -1 if fail
		
		wait, waitpid
			- Function Prototype
				pid_t	wait (int *wstatus)
				pid_t	waitpid (pid_t pid, int *wstatus, int options)
			- Description
				- Wait for state change in child of calling process
				- wait() response when one of childrn terminate, which is equivalent to waitpid(-1, &wstatus, 0)
				- In waitpid(), the value of pid can be
					- <-1	: wait for any child process whose process group ID equal to absolute value of pid
					- -1	: wait for any child
					- 0		: wait for any child whose process group ID equal to calling process
					- >0	: wait for the child whose process ID equal to value 
				- for waitpid(), options can refer to
					https://man7.org/linux/man-pages/man2/wait.2.html
				- wait(), return the pid of terminate child on success, -1 if fail
				- waitpid(), return the pid of child whose state change, -1 if fail. 0 if pid exist, but not state changed(if use WNOHANG)

		wait3, wait4
			- Function Prototype
				pid_t	wait3 (int *status, int options, struct rusage *rusage)
				pid_t	wait4 (pid_t pid, int *status, int options, struct rusage *rusage)
			- Description
				- similar to waitpid(), but return resource usage about child process
				- wait3() is equivalent to waitpid(-1, status, options)
				- wait4() is equivalent to waitpid(pid, status, options)
				- wait3 wait for any child, wait4 can wait for specidic child
				- For info on struct rusage, refer to
					https://www.gnu.org/software/libc/manual/html_node/Resource-Usage.html
				- Return value is same as waitpid

		stat, lstat, fstat
			- Function Prototype
				int		stat (const char *restrict pathname, struct stat *restrict statbuf)
				int		fstat (int fd, struct stat *restrict statbuf)
				int		lstat (const char *restrict pathname, struct stat *restrict statbuf)
			- Description
				- return information about a file, stored in statbuf
				- lstat accept symbolic link, and return the information of the link, not the file where link refer to
				- fstat accept file descriptor
				- For more info, refer to
					https://man7.org/linux/man-pages/man2/lstat.2.html
				- return 0 if success, -1 when error
		
		unlink
			- Function Prototype
				int		unlink (const char *pathname)
			- Description
				- delete a name from file system
				- If the name was last link to file and no process has file open, the file is deleted
				- If the name was last link to file but a process has the file open, the file will remain in existence until the file is close
				- If the name is symbolic link, the link is removed
				- If the name referred to socket, FIFO or device, the name is removed but process which have the file open can continue to use it
				- return 0 if success, -1 when error

		execve
			- Function Prototype
				int		execve(const char *pathname, char *const argv[], char *const envp[])
			- Description
				- execute the program referred by pathname
				- argv is array of string passed as command-line argument, argv must terminated by NULL pointer
				- envp is array of string passed as environment of new program, envp must terminated by NULL pointer
				- On success, execve() does not return, -1 is return on error

		dup, dup2
			- Function Prototype
				int		dup (int oldfd)
				int		dup2 (int oldfd, int newfd)
			- Description
				- dup() allocate a new file descriptor that refer to the same open file
				- dup2() is similar to dup(), but use newfd instead of new file descriptor
				- return the new file descriptor on success, -1 when fail
		
		pipe
			-Function Prototype
				int		pipe (int pipefd[2])
			- Description
				- Create a pipe, where allow interprocess communication
				- pipefd[0] is the read end of pipe, while pipefd[1] is the write end of pipe
				- return 0 when success, -1 when fail
	
Signal Function
		signal
			- Function Prototype
				sighandler_t	signal (int signum, sighandler_t handler)
			- Description
				- set the disposition of signum to handler
				- the handler can be either SIG_IGN, SIG_DFL or a defined function
					- SIG_IGN will ignore the signal
					- SIG_DFL will trigger default action
					- defined function will
						- reset to SIG_DFL
						- if the signal is blocked, handler is called with argument signum
						- If invocation of handler cause signal to be blocked, signal is unblocked upon return to handler
				- return the previous value of signal handler if success, SIG_ERR on failure
		
		sigaction
			- Function Prototype
				int		sigaction (int signum, const struct sigaction *restrict act, struct sigaction *restrict oldact)
			- Description
				- change the action when receive specific signal
				- signum can be any valid signal except SIGKILL and SIGSTOP
				- the sigaction struct is defined as 
					struct sigaction
					{
						void		(*sa_handler)(int);
						void		(*sa_sigaction)(int, siginfo_t *, void *);
               			sigset_t	sa_mask;
               			int			sa_flags;
               			void		(*sa_restorer)(void);
					}
					for more info, refer to
						https://man7.org/linux/man-pages/man2/sigaction.2.html
				- return 0 on success, -1 when error
		
		sigemptyset
			- Function Prototype
				int		sigemptyset (sigset_t *set)
			- Description
				- Initialize the signal pointed to by set to empty
				- return 0 on success, -1 when fail

		sigaddset
			- Function Prototype
				int		sigaddset (sigset_t *set, int signum)
			- Description
				- Add the respective signum to set
				- return 0 on success, -1 when fail
		
		kill
			- Function Prototype
				int		kill (pid_t pid, int sig)
			- Description
				- send signal to any process
				- pid
					- posive :sig is sent to process with specific pid
					- 0 : sig is sent to every process in process group of calling process
					- -1 : sig is sent to every process which calling process has permission to send signal
					- less than -1 : sig is sent to every process in process group whose id is -pid
				- If sig is 0, no signal is sent, but existence and permission checked is still perfrom
				- return 0 when success, -1 when error

Directory Management Function
		getcwd
			- Function Prototype
				char	*getcwd (char *buf, size_t size)
			-Description
				- return string that conatain the absolute pathname of current working directory
				- Copy the pathname to buf, which is of length size

		chdir
			- Function Prototype
				int		chdir(const char *path)
			- Description
				- change the current working directory to the directory specified in path
				- return 0 if success, -1 when error

		opendir
			- Function Prototype
				DIR		*opendir( const char *name)
			- Description
				- open a directory stream corresponding to name
				- return the pointer to the directory stream, return NULL when error

		readdir
			- Function Prototype
				struct dirent	*readdir(DIR *dirp)
			- Description
				- return a dirent pointer representing the next directory entry in directory stream pointed by dirp
				- return NULL if end of directory stream reached, or error
				- For info on struct dirent, refer to 
					https://man7.org/linux/man-pages/man3/readdir.3.html

		closedir
			- Function Prototype
				int		closedir (DIR *dirp)
			- Description
				- Close the directory stream associated with dirp
				- Also close the underlying file descriptor associated with dirp
				- The directory stream is not available after this call
				- return 0 on success, -1 when error

Terminal Function
		isatty
			- Function Prototype
				int		isatty (int fd)
			- Description
				- Check whether fd is an open file descriptor referring to terminal
				- return 1 if fd is an open file descriptorm otherwise, 0
		
		ttyname
			- Function Prototype
				char	*ttyname (int fd)
			- Description
				- return pointer to the pathname of the terminal device that is open on fd, or NULL when error
		
		ttyslot
			- Function Prototype
				int		ttyslot (void)
			- Description
				- return the index of current user entry in some file
				- Return th slot number when successful, 0 or -1 when fail (depend of system)

		ioctl
			- Function Prototype
				int		ioctl (int fd, unsigned long request, ...)
			- Description
				- Manipulate the underlying device parameters (such as audio) of special file
				- second arguement is device dependent request code
	 			- third arguement is untyped pointer to memory (void *)
	 			- return 0 or no negative when success, -1 when failure
				- for more info, refer to
					https://linuxhint.com/c-ioctl-function-usage/
					https://sysplay.github.io/books/LinuxDrivers/book/Content/Part09.html
					http://www.cs.otago.ac.nz/cosc440/labs/lab06.pdf
		
		getenv
			- Function Prototype
				char	*getenv (const char *name)
			- Description
				- search the environment list to find name
				- return the pointer to corresponding value
		
		tcsetatter
			- Function Prototype
				int		tcsetatter (int fd, int optional_action, const struct termios *termios_p)
			- Description
				- set the parameter associated with terminal refer by fd from termios
				- if optional_action id TCSANOW, change will occur imediately
				- if optional_action os TCSADRAIN, change occur after all output to fd is transimitted
				- if optional_action is TCSAFLUSH, change occur after all output is transimitted, and all input received shall be discards
				- for more info, refer to
					http://www.qnx.com/developers/docs/qnxcar2/index.jsp?topic=%2Fcom.qnx.doc.neutrino.lib_ref%2Ftopic%2Ft%2Ftcsetattr.html
				- return 0 on success, -1 when failure
				- tcsetattr() return success if any requested changes could be successfully carried out
					If make multiple changes, may need to check with tcgetattr()

		tcgetattr
			- Function Prototype
				int		tcgetattr (int fd, struct termios *termios_p)
			- Description
				- get the parameter associated with terminal, referred to by fd and store in termios
				- For more info,  refer to
					https://www.ibm.com/docs/en/zos/2.1.0?topic=functions-tcgetattr-get-attributes-termina
				- return 0 on success, -1 when failure
		
		tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
			- Function Prototype
				int		tgetent (char *bp, const char *name)
				int		tgetflag (char *id)
				int		tgetnum (char *id)
				char	*tgetstr(char *id, char **area)
				char	*tgoto(const char *cap, int col, int row)
				int		tputs(const char *str, int affcnt, int (*putc)(int))
			- Description
				- tgetent() load the entry for name. Return 1 for success, 0 if no entry and -1 if terminfo databse could not be found
				- tgetflag() get the boolean entry for id, or 0 if not available
				- tgetnum() get the numeric entry for id, or - if not available
				- tgetstr() return the string entry for id, or 0 if not available
					Use tputs() to output the return string, the return string will also be cpoied to area
				- tgoto() instantiate the parameter into the given capability
				- tputs() Retrieve capabilities by either termcap or terminfo name